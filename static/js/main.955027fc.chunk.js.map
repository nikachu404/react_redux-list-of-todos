{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialFilterParams","filterReducer","filterParams","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","React","memo","dispatch","selectedTodo","visibleTodos","useMemo","normalizedTitle","title","toLowerCase","normalizedQuery","trim","isQueryMatchTitle","includes","completed","length","className","map","id","onClick","currentTodoActions","selectTodo","cn","TodoFilter","useState","setQuery","onSubmit","event","preventDefault","value","onChange","target","filterActions","placeholder","newQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","useEffect","userId","actionsTodo","href","email","name","App","isLoading","setIsLoading","isError","setIsError","loadTodos","a","loadedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.955027fc.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: Status,\n};\n\nconst setFilterQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setFilterStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setFilterQuery, setFilterStatus };\n\ntype Action = SetQueryAction | SetStatusAction;\n\nexport type FilterParams = {\n  query: string,\n  status: Status,\n};\n\nconst initialFilterParams: FilterParams = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  filterParams: FilterParams = initialFilterParams,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...filterParams,\n        query: action.payload,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...filterParams,\n        status: action.payload,\n      };\n\n    default:\n      return filterParams;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = React.memo(() => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const selectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const visibleTodos = useMemo(() => {\n    if (query || status !== 'all') {\n      return todos.filter(todo => {\n        const normalizedTitle = todo.title.toLowerCase();\n        const normalizedQuery = query.toLowerCase().trim();\n        const isQueryMatchTitle = normalizedTitle.includes(normalizedQuery);\n\n        switch (status) {\n          case 'completed':\n            return todo.completed && isQueryMatchTitle;\n\n          case 'active':\n            return !todo.completed && isQueryMatchTitle;\n\n          default:\n            return todo && isQueryMatchTitle;\n        }\n      });\n    }\n\n    return todos;\n  }, [todos, query, status]);\n\n  return (\n    visibleTodos.length === 0\n      ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={cn(\n                        { 'far fa-eye': selectedTodo?.id !== todo.id },\n                        { 'far fa-eye-slash': selectedTodo?.id === todo.id },\n                      )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ));\n});\n","import React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n// import { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const [query, setQuery] = useState('');\n\n  const dispatch = useAppDispatch();\n  const { status } = useAppSelector(state => state.filter);\n\n  const setFilterQuery = (newQuery: string) => (\n    dispatch(filterActions.setFilterQuery(newQuery))\n  );\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setFilterQuery(event.target.value);\n  };\n\n  const handleQueryReset = () => {\n    setQuery('');\n    dispatch(filterActions.setFilterQuery(''));\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    switch (value) {\n      case 'all':\n        dispatch(filterActions.setFilterStatus('all'));\n        break;\n\n      case 'active':\n        dispatch(filterActions.setFilterStatus('active'));\n        break;\n\n      case 'completed':\n        dispatch(filterActions.setFilterStatus('completed'));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        { query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { memo, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as actionsTodo } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = memo(() => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser);\n    }\n  }, []);\n\n  const handleTodoRemove = () => {\n    dispatch(actionsTodo.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user || !selectedTodo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleTodoRemove}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n\n    try {\n      const loadedTodos = await getTodos();\n\n      dispatch(todosActions.setTodos(loadedTodos));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              {!isLoading && <TodoFilter />}\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {!isError && <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}